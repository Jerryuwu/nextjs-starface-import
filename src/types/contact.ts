// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
  'string',
  'boolean',
  'double',
  'integer',
  'long',
  'float',
  'number',
  'any',
]

class ObjectSerializer {
  public static findCorrectType(data: any, expectedType: string) {
    if (data == undefined) {
      return expectedType
    } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
      return expectedType
    } else if (expectedType === 'Date') {
      return expectedType
    } else {
      if (enumsMap[expectedType]) {
        return expectedType
      }

      if (!typeMap[expectedType]) {
        return expectedType // w/e we don't know the type
      }

      // Check the discriminator
      let discriminatorProperty = typeMap[expectedType].discriminator
      if (discriminatorProperty == null) {
        return expectedType // the type does not have a discriminator. use it.
      } else {
        if (data[discriminatorProperty]) {
          return data[discriminatorProperty] // use the type given in the discriminator
        } else {
          return expectedType // discriminator was not present (or an empty string)
        }
      }
    }
  }

  public static serialize(data: any, type: string) {
    if (data == undefined) {
      return data
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data
    } else if (type.lastIndexOf('Array<', 0) === 0) {
      // string.startsWith pre es6
      let subType: string = type.replace('Array<', '') // Array<Type> => Type>
      subType = subType.substring(0, subType.length - 1) // Type> => Type
      let transformedData: any[] = []
      for (let index in data) {
        let date = data[index]
        transformedData.push(ObjectSerializer.serialize(date, subType))
      }
      return transformedData
    } else if (type === 'Date') {
      return data.toString()
    } else {
      if (enumsMap[type]) {
        return data
      }
      if (!typeMap[type]) {
        // in case we dont know the type
        return data
      }

      // get the map for the correct type.
      let attributeTypes = typeMap[type].getAttributeTypeMap()
      let instance: { [index: string]: any } = {}
      for (let index in attributeTypes) {
        let attributeType = attributeTypes[index]
        instance[attributeType.baseName] = ObjectSerializer.serialize(
          data[attributeType.name],
          attributeType.type
        )
      }
      return instance
    }
  }

  public static deserialize(data: any, type: string) {
    // polymorphism may change the actual type.
    type = ObjectSerializer.findCorrectType(data, type)
    if (data == undefined) {
      return data
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data
    } else if (type.lastIndexOf('Array<', 0) === 0) {
      // string.startsWith pre es6
      let subType: string = type.replace('Array<', '') // Array<Type> => Type>
      subType = subType.substring(0, subType.length - 1) // Type> => Type
      let transformedData: any[] = []
      for (let index in data) {
        let date = data[index]
        transformedData.push(ObjectSerializer.deserialize(date, subType))
      }
      return transformedData
    } else if (type === 'Date') {
      return new Date(data)
    } else {
      if (enumsMap[type]) {
        // is Enum
        return data
      }

      if (!typeMap[type]) {
        // dont know the type
        return data
      }
      let instance = new typeMap[type]()
      let attributeTypes = typeMap[type].getAttributeTypeMap()
      for (let index in attributeTypes) {
        let attributeType = attributeTypes[index]
        instance[attributeType.name] = ObjectSerializer.deserialize(
          data[attributeType.baseName],
          attributeType.type
        )
      }
      return instance
    }
  }
}

/**
 * A basic account.
 */
export class Account {
  /**
   * the accountId of the account
   */
  'accountId': number
  /**
   * the displayInformation of the account
   */
  'displayInformation': string
  /**
   * the federationname of the account
   */
  'federationname': string
  /**
   * the firstname of the account
   */
  'firstname': string
  /**
   * the lastname of the account
   */
  'lastname': string
  /**
   * the account is not an federation account
   */
  'local': boolean
  /**
   * the primary internal phone number of the account
   */
  'primaryInternalPhoneNumber': string
  /**
   * the type of this account
   */
  'type': Account.TypeEnum

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'accountId',
      baseName: 'accountId',
      type: 'number',
    },
    {
      name: 'displayInformation',
      baseName: 'displayInformation',
      type: 'string',
    },
    {
      name: 'federationname',
      baseName: 'federationname',
      type: 'string',
    },
    {
      name: 'firstname',
      baseName: 'firstname',
      type: 'string',
    },
    {
      name: 'lastname',
      baseName: 'lastname',
      type: 'string',
    },
    {
      name: 'local',
      baseName: 'local',
      type: 'boolean',
    },
    {
      name: 'primaryInternalPhoneNumber',
      baseName: 'primaryInternalPhoneNumber',
      type: 'string',
    },
    {
      name: 'type',
      baseName: 'type',
      type: 'Account.TypeEnum',
    },
  ]

  static getAttributeTypeMap() {
    return Account.attributeTypeMap
  }
}

export namespace Account {
  export enum TypeEnum {
    USER = <any>'USER',
    GROUP = <any>'GROUP',
    REMOTEUSER = <any>'REMOTE_USER',
    REMOTEGROUP = <any>'REMOTE_GROUP',
  }
}
/**
 * A representation of a STARFACE assignableNumber
 */
export class AssignableNumber {
  /**
   * the assigned option of the assignableNumber
   */
  'assigned'?: boolean
  /**
   * the countryCode of the assignableNumber
   */
  'countryCode'?: string
  /**
   * the exitCode of the assignableNumber
   */
  'exitCode'?: string
  /**
   * the extension of the assignableNumber
   */
  'extension'?: string
  /**
   * the id of the assignableNumber
   */
  'id'?: number
  /**
   * the intern option of the assignableNumber
   */
  'intern'?: boolean
  /**
   * the localAreaCode of the assignableNumber
   */
  'localAreaCode'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'assigned',
      baseName: 'assigned',
      type: 'boolean',
    },
    {
      name: 'countryCode',
      baseName: 'countryCode',
      type: 'string',
    },
    {
      name: 'exitCode',
      baseName: 'exitCode',
      type: 'string',
    },
    {
      name: 'extension',
      baseName: 'extension',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'intern',
      baseName: 'intern',
      type: 'boolean',
    },
    {
      name: 'localAreaCode',
      baseName: 'localAreaCode',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return AssignableNumber.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE assignableUser
 */
export class AssignableUser {
  /**
   * the assigned option of the assignableUser
   */
  'assigned'?: boolean
  /**
   * the firstname of the assignableUser
   */
  'firstname'?: string
  /**
   * the id of the assignableUser
   */
  'id'?: number
  /**
   * the lastname of the assignableUser
   */
  'lastname'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'assigned',
      baseName: 'assigned',
      type: 'boolean',
    },
    {
      name: 'firstname',
      baseName: 'firstname',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'lastname',
      baseName: 'lastname',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return AssignableUser.attributeTypeMap
  }
}

/**
 * Schlüssel für String internationalisierung. Bei USER_DEFINED wird der der Attributname gezeigt
 */
export class Attribute {
  /**
   * Additional values for this Attribute, for example SHORT_DIAL
   */
  'additionalValues'?: { [key: string]: string }
  'displayKey': Attribute.DisplayKeyEnum
  /**
   * Vom Server aufgelöster displayKey in jeweiliger Benutzersprache
   */
  'i18nDisplayName'?: string
  'name': string
  'value'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'additionalValues',
      baseName: 'additionalValues',
      type: '{ [key: string]: string; }',
    },
    {
      name: 'displayKey',
      baseName: 'displayKey',
      type: 'Attribute.DisplayKeyEnum',
    },
    {
      name: 'i18nDisplayName',
      baseName: 'i18nDisplayName',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'value',
      baseName: 'value',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return Attribute.attributeTypeMap
  }
}

export namespace Attribute {
  export enum DisplayKeyEnum {
    NAME = <any>'NAME',
    SURNAME = <any>'SURNAME',
    SALUTATION = <any>'SALUTATION',
    TITLE = <any>'TITLE',
    EMAIL = <any>'EMAIL',
    COUNTRY = <any>'COUNTRY',
    CITY = <any>'CITY',
    STATE = <any>'STATE',
    POSTALCODE = <any>'POSTAL_CODE',
    STREET = <any>'STREET',
    URL = <any>'URL',
    COMPANY = <any>'COMPANY',
    MESSENGER = <any>'MESSENGER',
    BIRTHDAY = <any>'BIRTHDAY',
    NOTE = <any>'NOTE',
    JOBTITLE = <any>'JOB_TITLE',
    PHONENUMBER = <any>'PHONE_NUMBER',
    PRIVATEPHONENUMBER = <any>'PRIVATE_PHONE_NUMBER',
    OFFICEPHONENUMBER = <any>'OFFICE_PHONE_NUMBER',
    MOBILEPHONENUMBER = <any>'MOBILE_PHONE_NUMBER',
    FAXNUMBER = <any>'FAX_NUMBER',
    DESCRIPTION = <any>'DESCRIPTION',
    USERDEFINED = <any>'USER_DEFINED',
  }
}
export class AuthToken {
  'token': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'token',
      baseName: 'token',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return AuthToken.attributeTypeMap
  }
}

/**
 * Zusammenfassung von Attributen in Blöcke
 */
export class Block {
  'attributes': Array<Attribute>
  'name'?: string
  'resourceKey'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'attributes',
      baseName: 'attributes',
      type: 'Array<Attribute>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'resourceKey',
      baseName: 'resourceKey',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return Block.attributeTypeMap
  }
}

/**
 * Representation of a call service
 */
export class CallService {
  /**
   * the label of the CallService that is used in the UI
   */
  'label'?: string
  /**
   * the Id of the CallService
   */
  'serviceId': number
  /**
   * the name of the CallService
   */
  'serviceName'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'label',
      baseName: 'label',
      type: 'string',
    },
    {
      name: 'serviceId',
      baseName: 'serviceId',
      type: 'number',
    },
    {
      name: 'serviceName',
      baseName: 'serviceName',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return CallService.attributeTypeMap
  }
}

/**
 * A representation of STARFACE conference configuration
 */
export class ConferenceConfiguration {
  'eMailBody': string
  'eMailSubject': string
  'externalNumberId'?: number
  'getLanguage': ConferenceConfiguration.GetLanguageEnum
  'internalNumberId'?: number
  'serverAddress'?: string
  'variables': Array<ConferenceConfigurationMailBodyVariable>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'eMailBody',
      baseName: 'eMailBody',
      type: 'string',
    },
    {
      name: 'eMailSubject',
      baseName: 'eMailSubject',
      type: 'string',
    },
    {
      name: 'externalNumberId',
      baseName: 'externalNumberId',
      type: 'number',
    },
    {
      name: 'getLanguage',
      baseName: 'getLanguage',
      type: 'ConferenceConfiguration.GetLanguageEnum',
    },
    {
      name: 'internalNumberId',
      baseName: 'internalNumberId',
      type: 'number',
    },
    {
      name: 'serverAddress',
      baseName: 'serverAddress',
      type: 'string',
    },
    {
      name: 'variables',
      baseName: 'variables',
      type: 'Array<ConferenceConfigurationMailBodyVariable>',
    },
  ]

  static getAttributeTypeMap() {
    return ConferenceConfiguration.attributeTypeMap
  }
}

export namespace ConferenceConfiguration {
  export enum GetLanguageEnum {
    En = <any>'en',
    De = <any>'de',
    Es = <any>'es',
    Fr = <any>'fr',
    Nl = <any>'nl',
    Pl = <any>'pl',
    Sk = <any>'sk',
    Default = <any>'default',
  }
}
/**
 * A representation of STARFACE managed conference mail body variable
 */
export class ConferenceConfigurationMailBodyVariable {
  'name': string
  'placeholder': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'placeholder',
      baseName: 'placeholder',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return ConferenceConfigurationMailBodyVariable.attributeTypeMap
  }
}

/**
 * A representation of STARFACE managed configuration email subject and email body
 */
export class ConferenceConfigurationTexts {
  'eMailBody': string
  'eMailSubject': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'eMailBody',
      baseName: 'eMailBody',
      type: 'string',
    },
    {
      name: 'eMailSubject',
      baseName: 'eMailSubject',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return ConferenceConfigurationTexts.attributeTypeMap
  }
}

/**
 * contact information
 */
export class Contact {
  'accountId'?: number
  'blocks': Array<Block>
  'editable': boolean
  'id'?: string
  'jabberId'?: string
  'primaryExternalNumber'?: string
  'primaryInternalNumber'?: string
  'tags': Array<Tag>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'accountId',
      baseName: 'accountId',
      type: 'number',
    },
    {
      name: 'blocks',
      baseName: 'blocks',
      type: 'Array<Block>',
    },
    {
      name: 'editable',
      baseName: 'editable',
      type: 'boolean',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'jabberId',
      baseName: 'jabberId',
      type: 'string',
    },
    {
      name: 'primaryExternalNumber',
      baseName: 'primaryExternalNumber',
      type: 'string',
    },
    {
      name: 'primaryInternalNumber',
      baseName: 'primaryInternalNumber',
      type: 'string',
    },
    {
      name: 'tags',
      baseName: 'tags',
      type: 'Array<Tag>',
    },
  ]

  static getAttributeTypeMap() {
    return Contact.attributeTypeMap
  }
}

/**
 * Bandbreitesparendes Rückgabeobjekt für Liste von Contacts. Einmal Schema für den Summary-Block sowie den Phonenumbers-Block. Die ContactSummary-Daten können mit diesem Schema interpretiert werden.
 */
export class ContactList {
  'contacts': Array<ContactSummary>
  'metadata'?: RequestMetadata
  'phoneNumbersBlockSchema'?: Block
  'summaryBlockSchema'?: Block

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'contacts',
      baseName: 'contacts',
      type: 'Array<ContactSummary>',
    },
    {
      name: 'metadata',
      baseName: 'metadata',
      type: 'RequestMetadata',
    },
    {
      name: 'phoneNumbersBlockSchema',
      baseName: 'phoneNumbersBlockSchema',
      type: 'Block',
    },
    {
      name: 'summaryBlockSchema',
      baseName: 'summaryBlockSchema',
      type: 'Block',
    },
  ]

  static getAttributeTypeMap() {
    return ContactList.attributeTypeMap
  }
}

/**
 * Kurzusammenfassung der Werte eines Contacts ohne Schema-Information
 */
export class ContactSummary {
  /**
   * Additional values for the ContactSummary, for example INTERNALPHONE, EXTERNALPHONE, AVATAR
   */
  'additionalValues': { [key: string]: string }
  'id': string
  'phoneNumberValues': Array<string>
  'summaryValues': Array<string>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'additionalValues',
      baseName: 'additionalValues',
      type: '{ [key: string]: string; }',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'phoneNumberValues',
      baseName: 'phoneNumberValues',
      type: 'Array<string>',
    },
    {
      name: 'summaryValues',
      baseName: 'summaryValues',
      type: 'Array<string>',
    },
  ]

  static getAttributeTypeMap() {
    return ContactSummary.attributeTypeMap
  }
}

export class ContactsScheme {
  'detailBlocks': Array<Block>
  'phoneNumbersBlock'?: Block
  'summaryBlock'?: Block

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'detailBlocks',
      baseName: 'detailBlocks',
      type: 'Array<Block>',
    },
    {
      name: 'phoneNumbersBlock',
      baseName: 'phoneNumbersBlock',
      type: 'Block',
    },
    {
      name: 'summaryBlock',
      baseName: 'summaryBlock',
      type: 'Block',
    },
  ]

  static getAttributeTypeMap() {
    return ContactsScheme.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKey Form
 */
export class EditFunctionKey {
  'editFunctionKeyBusyLampField'?: EditFunctionKeyBusyLampField
  'editFunctionKeyCallList'?: EditFunctionKeyCallList
  'editFunctionKeyCcbs'?: EditFunctionKeyCcbs
  'editFunctionKeyDnd'?: EditFunctionKeyDnd
  'editFunctionKeyDtmf'?: EditFunctionKeyDtmf
  'editFunctionKeyForwardCall'?: EditFunctionKeyForwardCall
  'editFunctionKeyForwardNumberUnconditional'?: EditFunctionKeyForwardNumberUnconditional
  'editFunctionKeyGenericUrl'?: EditFunctionKeyGenericUrl
  'editFunctionKeyGroupLogin'?: EditFunctionKeyGroupLogin
  'editFunctionKeyModuleActivation'?: EditFunctionKeyModuleActivation
  'editFunctionKeyParkAndOrbit'?: EditFunctionKeyParkAndOrbit
  'editFunctionKeyPhoneContact'?: EditFunctionKeyPhoneContact
  'editFunctionKeyQuickDial'?: EditFunctionKeyQuickDial
  'editFunctionKeySeperator'?: EditFunctionKeySeperator
  'editFunctionKeySignalNumber'?: EditFunctionKeySignalNumber

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'editFunctionKeyBusyLampField',
      baseName: 'editFunctionKeyBusyLampField',
      type: 'EditFunctionKeyBusyLampField',
    },
    {
      name: 'editFunctionKeyCallList',
      baseName: 'editFunctionKeyCallList',
      type: 'EditFunctionKeyCallList',
    },
    {
      name: 'editFunctionKeyCcbs',
      baseName: 'editFunctionKeyCcbs',
      type: 'EditFunctionKeyCcbs',
    },
    {
      name: 'editFunctionKeyDnd',
      baseName: 'editFunctionKeyDnd',
      type: 'EditFunctionKeyDnd',
    },
    {
      name: 'editFunctionKeyDtmf',
      baseName: 'editFunctionKeyDtmf',
      type: 'EditFunctionKeyDtmf',
    },
    {
      name: 'editFunctionKeyForwardCall',
      baseName: 'editFunctionKeyForwardCall',
      type: 'EditFunctionKeyForwardCall',
    },
    {
      name: 'editFunctionKeyForwardNumberUnconditional',
      baseName: 'editFunctionKeyForwardNumberUnconditional',
      type: 'EditFunctionKeyForwardNumberUnconditional',
    },
    {
      name: 'editFunctionKeyGenericUrl',
      baseName: 'editFunctionKeyGenericUrl',
      type: 'EditFunctionKeyGenericUrl',
    },
    {
      name: 'editFunctionKeyGroupLogin',
      baseName: 'editFunctionKeyGroupLogin',
      type: 'EditFunctionKeyGroupLogin',
    },
    {
      name: 'editFunctionKeyModuleActivation',
      baseName: 'editFunctionKeyModuleActivation',
      type: 'EditFunctionKeyModuleActivation',
    },
    {
      name: 'editFunctionKeyParkAndOrbit',
      baseName: 'editFunctionKeyParkAndOrbit',
      type: 'EditFunctionKeyParkAndOrbit',
    },
    {
      name: 'editFunctionKeyPhoneContact',
      baseName: 'editFunctionKeyPhoneContact',
      type: 'EditFunctionKeyPhoneContact',
    },
    {
      name: 'editFunctionKeyQuickDial',
      baseName: 'editFunctionKeyQuickDial',
      type: 'EditFunctionKeyQuickDial',
    },
    {
      name: 'editFunctionKeySeperator',
      baseName: 'editFunctionKeySeperator',
      type: 'EditFunctionKeySeperator',
    },
    {
      name: 'editFunctionKeySignalNumber',
      baseName: 'editFunctionKeySignalNumber',
      type: 'EditFunctionKeySignalNumber',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKey.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyBusyLampField Form
 */
export class EditFunctionKeyBusyLampField {
  /**
   * the available accounts of the FunctionKey
   */
  'availableAccounts'?: Array<Account>
  /**
   * accountId of busy lamp field
   */
  'blfAccountId': number
  /**
   * the display information of the blf accountid
   */
  'blfDisplayInformation': string
  /**
   * the name of the FunctionKey
   */
  'name': string
  /**
   * the user telephonenumber of the FunctionKey
   */
  'number': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'availableAccounts',
      baseName: 'availableAccounts',
      type: 'Array<Account>',
    },
    {
      name: 'blfAccountId',
      baseName: 'blfAccountId',
      type: 'number',
    },
    {
      name: 'blfDisplayInformation',
      baseName: 'blfDisplayInformation',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'number',
      baseName: 'number',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyBusyLampField.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyCallList Form
 */
export class EditFunctionKeyCallList {
  /**
   * the call list type of the FunctionKey
   */
  'callListRequest': EditFunctionKeyCallList.CallListRequestEnum
  /**
   * list of possible callListRequests
   */
  'callListRequests': Array<string>
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'callListRequest',
      baseName: 'callListRequest',
      type: 'EditFunctionKeyCallList.CallListRequestEnum',
    },
    {
      name: 'callListRequests',
      baseName: 'callListRequests',
      type: 'Array<string>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyCallList.attributeTypeMap
  }
}

export namespace EditFunctionKeyCallList {
  export enum CallListRequestEnum {
    INCOMING = <any>'INCOMING',
    OUTGOING = <any>'OUTGOING',
    MISSED = <any>'MISSED',
  }
}
/**
 * A representation of a EditFunctionKeyCcbs Form
 */
export class EditFunctionKeyCcbs {
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyCcbs.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyDnd Form
 */
export class EditFunctionKeyDnd {
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyDnd.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyDtmf Form
 */
export class EditFunctionKeyDtmf {
  /**
   * the dtmf of the FunctionKey
   */
  'dtmf': string
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'dtmf',
      baseName: 'dtmf',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyDtmf.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyForwardCall Form
 */
export class EditFunctionKeyForwardCall {
  /**
   * the forward type allways busy timeout
   */
  'forwardType': EditFunctionKeyForwardCall.ForwardTypeEnum
  /**
   * the name of the FunctionKey
   */
  'forwardTypes': Array<string>
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'forwardType',
      baseName: 'forwardType',
      type: 'EditFunctionKeyForwardCall.ForwardTypeEnum',
    },
    {
      name: 'forwardTypes',
      baseName: 'forwardTypes',
      type: 'Array<string>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyForwardCall.attributeTypeMap
  }
}

export namespace EditFunctionKeyForwardCall {
  export enum ForwardTypeEnum {
    ALWAYS = <any>'ALWAYS',
    BUSY = <any>'BUSY',
    TIMEOUT = <any>'TIMEOUT',
  }
}
/**
 * A representation of a EditFunctionKeyForwardNumberUnconditional Form
 */
export class EditFunctionKeyForwardNumberUnconditional {
  'editFunctionKeyFnuNumberSetting': Array<EditFunctionKeyForwardNumberUnconditionalNumberSetting>
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'editFunctionKeyFnuNumberSetting',
      baseName: 'editFunctionKeyFnuNumberSetting',
      type: 'Array<EditFunctionKeyForwardNumberUnconditionalNumberSetting>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyForwardNumberUnconditional.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyForwardNumberUnconditionalNumberSetting Form
 */
export class EditFunctionKeyForwardNumberUnconditionalNumberSetting {
  /**
   * is number setting activated
   */
  'activated': boolean
  /**
   * is number setting a group
   */
  'group': boolean
  /**
   * the number of the setting
   */
  'number': string
  /**
   * the numberId of the setting
   */
  'numberId': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'activated',
      baseName: 'activated',
      type: 'boolean',
    },
    {
      name: 'group',
      baseName: 'group',
      type: 'boolean',
    },
    {
      name: 'number',
      baseName: 'number',
      type: 'string',
    },
    {
      name: 'numberId',
      baseName: 'numberId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyForwardNumberUnconditionalNumberSetting.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyGenericUrl Form
 */
export class EditFunctionKeyGenericUrl {
  /**
   * the url of the FunctionKey
   */
  'genericURL': string
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'genericURL',
      baseName: 'genericURL',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyGenericUrl.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyGroupLogin Form
 */
export class EditFunctionKeyGroupLogin {
  /**
   * the EditFunctionKeyGlGroupSettings of the FunctionKey
   */
  'editFunctionKeyGlGroupSettings': Array<EditFunctionKeyGroupLoginGroupSettings>
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'editFunctionKeyGlGroupSettings',
      baseName: 'editFunctionKeyGlGroupSettings',
      type: 'Array<EditFunctionKeyGroupLoginGroupSettings>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyGroupLogin.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyGroupLoginGroupSettings Form
 */
export class EditFunctionKeyGroupLoginGroupSettings {
  /**
   * is number setting activated
   */
  'activated': boolean
  /**
   * the groupId
   */
  'groupId': number
  /**
   * the groupname
   */
  'groupname': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'activated',
      baseName: 'activated',
      type: 'boolean',
    },
    {
      name: 'groupId',
      baseName: 'groupId',
      type: 'number',
    },
    {
      name: 'groupname',
      baseName: 'groupname',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyGroupLoginGroupSettings.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyModuleActivation Form
 */
export class EditFunctionKeyModuleActivation {
  /**
   * the editFunctionKeyMaModuleSettings of the FunctionKey
   */
  'editFunctionKeyMaModuleSettings': Array<EditFunctionKeyModuleActivationModuleSettings>
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'editFunctionKeyMaModuleSettings',
      baseName: 'editFunctionKeyMaModuleSettings',
      type: 'Array<EditFunctionKeyModuleActivationModuleSettings>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyModuleActivation.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyModuleActivationModuleSettings Form
 */
export class EditFunctionKeyModuleActivationModuleSettings {
  /**
   * is setting activated
   */
  'activated': boolean
  /**
   * the moduleId of the FunctionKey
   */
  'moduleId': string
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'activated',
      baseName: 'activated',
      type: 'boolean',
    },
    {
      name: 'moduleId',
      baseName: 'moduleId',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyModuleActivationModuleSettings.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyParkAndOrbit Form
 */
export class EditFunctionKeyParkAndOrbit {
  /**
   * the name of the FunctionKey
   */
  'name': string
  /**
   * the parkAndOrbitNumber of the FunctionKey
   */
  'parkAndOrbitNumber': string
  /**
   * the list of park and orbit numbers
   */
  'parkAndOrbitNumbers': Array<string>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'parkAndOrbitNumber',
      baseName: 'parkAndOrbitNumber',
      type: 'string',
    },
    {
      name: 'parkAndOrbitNumbers',
      baseName: 'parkAndOrbitNumbers',
      type: 'Array<string>',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyParkAndOrbit.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeyPhoneContact Form
 */
export class EditFunctionKeyPhoneContact {
  /**
   * the addressbookRequest of the FunctionKey
   */
  'addressbookRequest': EditFunctionKeyPhoneContact.AddressbookRequestEnum
  /**
   * the possible request types of the adressbook
   */
  'addressbookRequests': Array<string>
  /**
   * the folders of the FunctionKey
   */
  'folders': Array<string>
  /**
   * the name of the FunctionKey
   */
  'name': string
  /**
   * the selectedFolder of the FunctionKey
   */
  'selectedFolder': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'addressbookRequest',
      baseName: 'addressbookRequest',
      type: 'EditFunctionKeyPhoneContact.AddressbookRequestEnum',
    },
    {
      name: 'addressbookRequests',
      baseName: 'addressbookRequests',
      type: 'Array<string>',
    },
    {
      name: 'folders',
      baseName: 'folders',
      type: 'Array<string>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'selectedFolder',
      baseName: 'selectedFolder',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyPhoneContact.attributeTypeMap
  }
}

export namespace EditFunctionKeyPhoneContact {
  export enum AddressbookRequestEnum {
    CONTACTLIST = <any>'CONTACTLIST',
    CONTACTSEARCH = <any>'CONTACTSEARCH',
  }
}
/**
 * A representation of a EditFunctionKeyQuickDial Form
 */
export class EditFunctionKeyQuickDial {
  /**
   * the name of the FunctionKey
   */
  'name': string
  /**
   * the user telephonenumber of the FunctionKey
   */
  'number': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'number',
      baseName: 'number',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeyQuickDial.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeySeperator Form
 */
export class EditFunctionKeySeperator {
  /**
   * the name of the FunctionKey
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeySeperator.attributeTypeMap
  }
}

/**
 * A representation of a EditFunctionKeySignalNumber Form
 */
export class EditFunctionKeySignalNumber {
  /**
   * the name of the FunctionKey
   */
  'name': string
  /**
   * the phoneNumber of the FunctionKey
   */
  'phoneNumber': string
  /**
   * the phoneNumberId of the FunctionKey
   */
  'phoneNumberId': number
  /**
   * the possible signal phonenumbers
   */
  'possibleSignalnumbers': Array<PhoneNumber>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'phoneNumberId',
      baseName: 'phoneNumberId',
      type: 'number',
    },
    {
      name: 'possibleSignalnumbers',
      baseName: 'possibleSignalnumbers',
      type: 'Array<PhoneNumber>',
    },
  ]

  static getAttributeTypeMap() {
    return EditFunctionKeySignalNumber.attributeTypeMap
  }
}

/**
 * A representation of an FmcPhone
 */
export class FmcPhone {
  /**
   * whether this FmcPhone is activated or deactivated
   */
  'active': boolean
  /**
   * whether the user must confirm a call with the FmcPhone
   */
  'confirm': boolean
  /**
   * defines the delay before the FmcPhone is called
   */
  'delay': number
  /**
   * List of TimeFrames that define when this FmcPhone is called
   */
  'fmcSchedule': Array<TimeFrame>
  /**
   * the Id of the FmcPhone
   */
  'id': string
  /**
   * the number that will be called
   */
  'number': string
  /**
   * the Id of the corresponding telephone
   */
  'telephoneId'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'active',
      baseName: 'active',
      type: 'boolean',
    },
    {
      name: 'confirm',
      baseName: 'confirm',
      type: 'boolean',
    },
    {
      name: 'delay',
      baseName: 'delay',
      type: 'number',
    },
    {
      name: 'fmcSchedule',
      baseName: 'fmcSchedule',
      type: 'Array<TimeFrame>',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'number',
      baseName: 'number',
      type: 'string',
    },
    {
      name: 'telephoneId',
      baseName: 'telephoneId',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return FmcPhone.attributeTypeMap
  }
}

/**
 * A representation of a FunctionKey
 */
export class FunctionKey {
  /**
   * the accountId of the FunctionKey
   */
  'accountId': string
  /**
   * Modules to activate
   */
  'activateModuleIds'?: Array<string>
  /**
   * AddressBookFolderName
   */
  'addressBookFolderName'?: string
  /**
   * Type of AddressbookRequest
   */
  'addressbookRequest'?: FunctionKey.AddressbookRequestEnum
  /**
   * AccountId of busy lamp field
   */
  'blfAccountId'?: number
  /**
   * Type of requested list
   */
  'callListRequest'?: FunctionKey.CallListRequestEnum
  /**
   * Number to call
   */
  'directCallTargetnumber'?: string
  /**
   * Displaynumberid to signal
   */
  'displayNumberId'?: number
  /**
   * Dtmf to send
   */
  'dtmf'?: string
  /**
   * Type of forward
   */
  'forwardType'?: FunctionKey.ForwardTypeEnum
  /**
   * The type of the FunctionKey determining the concrete FunctionKey implementation
   */
  'functionKeyType': FunctionKey.FunctionKeyTypeEnum
  /**
   * generic URL to send
   */
  'genericURL'?: string
  /**
   * Groupids to activate or deactivate
   */
  'groupIds'?: Array<number>
  /**
   * the Id of the FunctionKey
   */
  'id': string
  /**
   * the display name of the FunctionKey
   */
  'name': string
  /**
   * Number of park and orbit position
   */
  'poNumber'?: string
  /**
   * the position of the FunctionKey wthin its FunctionKeySet
   */
  'position': number
  /**
   * NumberIds to redirect
   */
  'redirectNumberIds'?: Array<number>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'accountId',
      baseName: 'accountId',
      type: 'string',
    },
    {
      name: 'activateModuleIds',
      baseName: 'activateModuleIds',
      type: 'Array<string>',
    },
    {
      name: 'addressBookFolderName',
      baseName: 'addressBookFolderName',
      type: 'string',
    },
    {
      name: 'addressbookRequest',
      baseName: 'addressbookRequest',
      type: 'FunctionKey.AddressbookRequestEnum',
    },
    {
      name: 'blfAccountId',
      baseName: 'blfAccountId',
      type: 'number',
    },
    {
      name: 'callListRequest',
      baseName: 'callListRequest',
      type: 'FunctionKey.CallListRequestEnum',
    },
    {
      name: 'directCallTargetnumber',
      baseName: 'directCallTargetnumber',
      type: 'string',
    },
    {
      name: 'displayNumberId',
      baseName: 'displayNumberId',
      type: 'number',
    },
    {
      name: 'dtmf',
      baseName: 'dtmf',
      type: 'string',
    },
    {
      name: 'forwardType',
      baseName: 'forwardType',
      type: 'FunctionKey.ForwardTypeEnum',
    },
    {
      name: 'functionKeyType',
      baseName: 'functionKeyType',
      type: 'FunctionKey.FunctionKeyTypeEnum',
    },
    {
      name: 'genericURL',
      baseName: 'genericURL',
      type: 'string',
    },
    {
      name: 'groupIds',
      baseName: 'groupIds',
      type: 'Array<number>',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'poNumber',
      baseName: 'poNumber',
      type: 'string',
    },
    {
      name: 'position',
      baseName: 'position',
      type: 'number',
    },
    {
      name: 'redirectNumberIds',
      baseName: 'redirectNumberIds',
      type: 'Array<number>',
    },
  ]

  static getAttributeTypeMap() {
    return FunctionKey.attributeTypeMap
  }
}

export namespace FunctionKey {
  export enum AddressbookRequestEnum {
    CONTACTLIST = <any>'CONTACTLIST',
    CONTACTSEARCH = <any>'CONTACTSEARCH',
  }
  export enum CallListRequestEnum {
    INCOMING = <any>'INCOMING',
    OUTGOING = <any>'OUTGOING',
    MISSED = <any>'MISSED',
  }
  export enum ForwardTypeEnum {
    ALWAYS = <any>'ALWAYS',
    BUSY = <any>'BUSY',
    TIMEOUT = <any>'TIMEOUT',
  }
  export enum FunctionKeyTypeEnum {
    SIGNALNUMBER = <any>'SIGNALNUMBER',
    SEPARATOR = <any>'SEPARATOR',
    QUICKDIAL = <any>'QUICKDIAL',
    PHONEGENERICURL = <any>'PHONEGENERICURL',
    PHONEDTMF = <any>'PHONEDTMF',
    ADDRESSBOOK = <any>'ADDRESSBOOK',
    PHONECALLLIST = <any>'PHONECALLLIST',
    PARKANDORBIT = <any>'PARKANDORBIT',
    MODULEACTIVATION = <any>'MODULEACTIVATION',
    GROUPLOGIN = <any>'GROUPLOGIN',
    FORWARDNUMBER = <any>'FORWARDNUMBER',
    FORWARD = <any>'FORWARD',
    DONOTDISTURB = <any>'DONOTDISTURB',
    COMPLETIONOFCALLSTOBUSYSUBSCRIBER = <any>(
      'COMPLETIONOFCALLSTOBUSYSUBSCRIBER'
    ),
    BUSYLAMPFIELD = <any>'BUSYLAMPFIELD',
  }
}
/**
 * An ordered set of FunctionKeys that can be used for changing the order of FunctionKeys
 */
export class FunctionKeySet {
  /**
   * the Id of the FunctionKeySet
   */
  'id': string
  /**
   * List of Ids of contained FunctionKeys. The ordering of this List defines the positioning of the FunctionKeys.
   */
  'keyOrder': Array<string>
  /**
   * the name of the FunctionKeySet
   */
  'name': string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'keyOrder',
      baseName: 'keyOrder',
      type: 'Array<string>',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return FunctionKeySet.attributeTypeMap
  }
}

/**
 * Error informations about a function key that is saved
 */
export class FunctionKeySetError {
  /**
   * the wrong filled field
   */
  'errorField': string
  /**
   * the error type ( DUBLICATE or CORRUPT )
   */
  'functionKeyErrorType': FunctionKeySetError.FunctionKeyErrorTypeEnum
  /**
   * the keyposition
   */
  'position': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'errorField',
      baseName: 'errorField',
      type: 'string',
    },
    {
      name: 'functionKeyErrorType',
      baseName: 'functionKeyErrorType',
      type: 'FunctionKeySetError.FunctionKeyErrorTypeEnum',
    },
    {
      name: 'position',
      baseName: 'position',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return FunctionKeySetError.attributeTypeMap
  }
}

export namespace FunctionKeySetError {
  export enum FunctionKeyErrorTypeEnum {
    DUPLICATE = <any>'DUPLICATE',
    CORRUPT = <any>'CORRUPT',
  }
}
/**
 * A representation of a STARFACE group
 */
export class Group {
  /**
   * the assignableNumbers of the group
   */
  'assignableNumbers'?: Array<AssignableNumber>
  /**
   * the assignableUsers of the group
   */
  'assignableUsers'?: Array<AssignableUser>
  /**
   * the chatGroup option of the group
   */
  'chatGroup'?: boolean
  /**
   * the groupId of the group
   */
  'groupId'?: string
  /**
   * the id of the group
   */
  'id'?: number
  /**
   * the name of the group
   */
  'name'?: string
  /**
   * the voicemail option of the group
   */
  'voicemail'?: boolean

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'assignableNumbers',
      baseName: 'assignableNumbers',
      type: 'Array<AssignableNumber>',
    },
    {
      name: 'assignableUsers',
      baseName: 'assignableUsers',
      type: 'Array<AssignableUser>',
    },
    {
      name: 'chatGroup',
      baseName: 'chatGroup',
      type: 'boolean',
    },
    {
      name: 'groupId',
      baseName: 'groupId',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'voicemail',
      baseName: 'voicemail',
      type: 'boolean',
    },
  ]

  static getAttributeTypeMap() {
    return Group.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE group list item
 */
export class GroupListItem {
  /**
   * the external number of the group
   */
  'groupexternalnumber'?: string
  /**
   * the internal number of the group
   */
  'groupinternalnumber'?: string
  /**
   * the name of the group
   */
  'groupname'?: string
  /**
   * the id of the group
   */
  'id'?: number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'groupexternalnumber',
      baseName: 'groupexternalnumber',
      type: 'string',
    },
    {
      name: 'groupinternalnumber',
      baseName: 'groupinternalnumber',
      type: 'string',
    },
    {
      name: 'groupname',
      baseName: 'groupname',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return GroupListItem.attributeTypeMap
  }
}

export class Login {
  'loginType': Login.LoginTypeEnum
  'nonce': string
  'secret'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'loginType',
      baseName: 'loginType',
      type: 'Login.LoginTypeEnum',
    },
    {
      name: 'nonce',
      baseName: 'nonce',
      type: 'string',
    },
    {
      name: 'secret',
      baseName: 'secret',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return Login.attributeTypeMap
  }
}

export namespace Login {
  export enum LoginTypeEnum {
    Internal = <any>'Internal',
    ActiveDirectory = <any>'ActiveDirectory',
  }
}
/**
 * A representation of a STARFACE conference
 */
export class ManagedConference {
  'conferenceId'?: number
  'eMailBody': string
  'name': string
  'occurrence': ManagedConference.OccurrenceEnum
  'participants'?: Array<ManagedConferenceParticipant>
  'startTime': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'conferenceId',
      baseName: 'conferenceId',
      type: 'number',
    },
    {
      name: 'eMailBody',
      baseName: 'eMailBody',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'occurrence',
      baseName: 'occurrence',
      type: 'ManagedConference.OccurrenceEnum',
    },
    {
      name: 'participants',
      baseName: 'participants',
      type: 'Array<ManagedConferenceParticipant>',
    },
    {
      name: 'startTime',
      baseName: 'startTime',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return ManagedConference.attributeTypeMap
  }
}

export namespace ManagedConference {
  export enum OccurrenceEnum {
    ONCE = <any>'ONCE',
    EVERYDAY = <any>'EVERYDAY',
    EVERYWEEK = <any>'EVERYWEEK',
    EVERYMONTH = <any>'EVERYMONTH',
  }
}
/**
 * A representation of STARFACE managed conference participant
 */
export class ManagedConferenceParticipant {
  'callOnStart': boolean
  'displayName': string
  'eMailAddress'?: string
  'isModerator': boolean
  'participantId'?: number
  'phoneNumber': string
  'userId': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'callOnStart',
      baseName: 'callOnStart',
      type: 'boolean',
    },
    {
      name: 'displayName',
      baseName: 'displayName',
      type: 'string',
    },
    {
      name: 'eMailAddress',
      baseName: 'eMailAddress',
      type: 'string',
    },
    {
      name: 'isModerator',
      baseName: 'isModerator',
      type: 'boolean',
    },
    {
      name: 'participantId',
      baseName: 'participantId',
      type: 'number',
    },
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'userId',
      baseName: 'userId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return ManagedConferenceParticipant.attributeTypeMap
  }
}

/**
 * A representation of STARFACE managed conference summary
 */
export class ManagedConferenceSummary {
  'conferenceId': number
  'isActive': boolean
  'isReadonly': boolean
  'isTerminated': boolean
  'name': string
  'startTime': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'conferenceId',
      baseName: 'conferenceId',
      type: 'number',
    },
    {
      name: 'isActive',
      baseName: 'isActive',
      type: 'boolean',
    },
    {
      name: 'isReadonly',
      baseName: 'isReadonly',
      type: 'boolean',
    },
    {
      name: 'isTerminated',
      baseName: 'isTerminated',
      type: 'boolean',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'startTime',
      baseName: 'startTime',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return ManagedConferenceSummary.attributeTypeMap
  }
}

/**
 * Representation of an assignment from a PhoneNumber to a Phone.
 */
export class NumberForPhoneAssignment {
  /**
   * the flag that indicates whether the PhoneNumber is active for this assignment.
   */
  'active': boolean
  /**
   * The number of the PhoneNumber
   */
  'phoneNumber': string
  /**
   * the Id of the PhoneNumber that is assigned
   */
  'phoneNumberId': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'active',
      baseName: 'active',
      type: 'boolean',
    },
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'phoneNumberId',
      baseName: 'phoneNumberId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return NumberForPhoneAssignment.attributeTypeMap
  }
}

/**
 * Representation of permission that can be granted to a User
 */
export class PermissionInfo {
  /**
   * description of the permission
   */
  'description'?: string
  /**
   * Id of the permission
   */
  'id'?: number
  /**
   * name of the permission
   */
  'permission'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'permission',
      baseName: 'permission',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return PermissionInfo.attributeTypeMap
  }
}

/**
 * Representation of an assignment from a Phone to a User
 */
export class PhoneAssignment {
  /**
   * the flag that indicates whether the Phone is active for the User. Inactive Phones won't ring on incoming calls.
   */
  'active': boolean
  /**
   * the flag that indicates whether the assigned Phone is a STARFACE iFMC Phone
   */
  'isIFMC': boolean
  /**
   * the Id of the Phone that is assigned to the User
   */
  'phoneId': number
  /**
   * The name of the Phone that is assigned to the User.
   */
  'phoneName': string
  /**
   * the Id of the User
   */
  'userId': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'active',
      baseName: 'active',
      type: 'boolean',
    },
    {
      name: 'isIFMC',
      baseName: 'isIFMC',
      type: 'boolean',
    },
    {
      name: 'phoneId',
      baseName: 'phoneId',
      type: 'number',
    },
    {
      name: 'phoneName',
      baseName: 'phoneName',
      type: 'string',
    },
    {
      name: 'userId',
      baseName: 'userId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return PhoneAssignment.attributeTypeMap
  }
}

/**
 * Representation of phone config options for a User
 */
export class PhoneConfig {
  /**
   * the flag that indicates whether a call gets rejected if the User is currently busy
   */
  'callWaiting': boolean
  /**
   * the Id of the PhoneNumber that is displayed when the User makes a call
   */
  'displayNumberId': number
  /**
   * the flag that indicates whether the user is DND and thus won't recieve calls
   */
  'doNotDisturb': boolean
  /**
   * the Id of the primary Phone of the User
   */
  'primaryPhoneId': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'callWaiting',
      baseName: 'callWaiting',
      type: 'boolean',
    },
    {
      name: 'displayNumberId',
      baseName: 'displayNumberId',
      type: 'number',
    },
    {
      name: 'doNotDisturb',
      baseName: 'doNotDisturb',
      type: 'boolean',
    },
    {
      name: 'primaryPhoneId',
      baseName: 'primaryPhoneId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return PhoneConfig.attributeTypeMap
  }
}

/**
 * A representation of a phone number
 */
export class PhoneNumber {
  /**
   * the id of the account this phone number is assigned to or null if it is not assigned to an account
   */
  'assignedGroupAccountId'?: number
  /**
   * the id of the module instance this phone number is assigned to or null if it is not assigned to a module
   */
  'assignedModuleInstanceId'?: string
  /**
   * the id of the service this phone number is assigned to or null
   */
  'assignedServiceId'?: number
  /**
   * the id of the account this phone number is assigned to or null if it is not assigned to an account
   */
  'assignedUserAccountId'?: number
  /**
   * the exit code of the phone number
   */
  'exitCode'?: string
  /**
   * the Id of the phone number
   */
  'id': number
  /**
   * the local prefix of the phone number
   */
  'localPrefix'?: string
  /**
   * the national prefix of the phone number
   */
  'nationalPrefix'?: string
  /**
   * the number itself (extention)
   */
  'number': string
  /**
   * the id of the corresponding NumberBlock
   */
  'numberBlockId'?: number
  /**
   * the type of the phone number
   */
  'type': PhoneNumber.TypeEnum

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'assignedGroupAccountId',
      baseName: 'assignedGroupAccountId',
      type: 'number',
    },
    {
      name: 'assignedModuleInstanceId',
      baseName: 'assignedModuleInstanceId',
      type: 'string',
    },
    {
      name: 'assignedServiceId',
      baseName: 'assignedServiceId',
      type: 'number',
    },
    {
      name: 'assignedUserAccountId',
      baseName: 'assignedUserAccountId',
      type: 'number',
    },
    {
      name: 'exitCode',
      baseName: 'exitCode',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'localPrefix',
      baseName: 'localPrefix',
      type: 'string',
    },
    {
      name: 'nationalPrefix',
      baseName: 'nationalPrefix',
      type: 'string',
    },
    {
      name: 'number',
      baseName: 'number',
      type: 'string',
    },
    {
      name: 'numberBlockId',
      baseName: 'numberBlockId',
      type: 'number',
    },
    {
      name: 'type',
      baseName: 'type',
      type: 'PhoneNumber.TypeEnum',
    },
  ]

  static getAttributeTypeMap() {
    return PhoneNumber.attributeTypeMap
  }
}

export namespace PhoneNumber {
  export enum TypeEnum {
    INVALID = <any>'INVALID',
    INTERNAL = <any>'INTERNAL',
    EXTERNAL = <any>'EXTERNAL',
    RESERVED = <any>'RESERVED',
    NT = <any>'NT',
    DISPLAY = <any>'DISPLAY',
    FXO = <any>'FXO',
  }
}
/**
 * Representation of an assignment from a PhoneNumber to a User
 */
export class PhoneNumberAssignment {
  /**
   * the Id of the Account
   */
  'accountId': number
  /**
   * the Id of the PhoneNumber that is assigned to the User
   */
  'phoneNumberId': number
  /**
   * the Id of the call service rule that is used for this phone number.
   */
  'serviceId': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'accountId',
      baseName: 'accountId',
      type: 'number',
    },
    {
      name: 'phoneNumberId',
      baseName: 'phoneNumberId',
      type: 'number',
    },
    {
      name: 'serviceId',
      baseName: 'serviceId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return PhoneNumberAssignment.attributeTypeMap
  }
}

/**
 * Representation of phone number config options for a User
 */
export class PhoneNumberConfig {
  /**
   * the possible signal phonenumbers
   */
  'possibleSignalnumbers': Array<PhoneNumber>
  /**
   * the Id of the PhoneNumber that is used as the primary external phone number
   */
  'primaryExternalNumberId': number
  /**
   * the Id of the PhoneNumber that is used as the primary internal phone number
   */
  'primaryInternalNumberId'?: number
  /**
   * the Id of the PhoneNumber that is used as the signaling phone number
   */
  'signalingNumberId'?: number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'possibleSignalnumbers',
      baseName: 'possibleSignalnumbers',
      type: 'Array<PhoneNumber>',
    },
    {
      name: 'primaryExternalNumberId',
      baseName: 'primaryExternalNumberId',
      type: 'number',
    },
    {
      name: 'primaryInternalNumberId',
      baseName: 'primaryInternalNumberId',
      type: 'number',
    },
    {
      name: 'signalingNumberId',
      baseName: 'signalingNumberId',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return PhoneNumberConfig.attributeTypeMap
  }
}

/**
 * Abstract base for mailbox and phonenumber destination
 */
export class RedirectDestination {
  /**
   * The type of the RedirectDestination determining the concrete RedirectDestination implementation
   */
  'redirectDestinationType': RedirectDestination.RedirectDestinationTypeEnum

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'redirectDestinationType',
      baseName: 'redirectDestinationType',
      type: 'RedirectDestination.RedirectDestinationTypeEnum',
    },
  ]

  static getAttributeTypeMap() {
    return RedirectDestination.attributeTypeMap
  }
}

export namespace RedirectDestination {
  export enum RedirectDestinationTypeEnum {
    MAILBOX = <any>'MAILBOX',
    PHONENUMBER = <any>'PHONENUMBER',
  }
}
/**
 * This RedirectDestination will redirect to the mailbox with the given mailboxId
 */
export class RedirectMailboxDestination {
  'mailboxId': string
  /**
   * The type of the RedirectDestination determining the concrete RedirectDestination implementation
   */
  'redirectDestinationType': RedirectMailboxDestination.RedirectDestinationTypeEnum

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'mailboxId',
      baseName: 'mailboxId',
      type: 'string',
    },
    {
      name: 'redirectDestinationType',
      baseName: 'redirectDestinationType',
      type: 'RedirectMailboxDestination.RedirectDestinationTypeEnum',
    },
  ]

  static getAttributeTypeMap() {
    return RedirectMailboxDestination.attributeTypeMap
  }
}

export namespace RedirectMailboxDestination {
  export enum RedirectDestinationTypeEnum {
    MAILBOX = <any>'MAILBOX',
    PHONENUMBER = <any>'PHONENUMBER',
  }
}
/**
 * This RedirectDestination will redirect to a phoneNumber
 */
export class RedirectPhoneNumberDestination {
  'phoneNumber': string
  /**
   * The type of the RedirectDestination determining the concrete RedirectDestination implementation
   */
  'redirectDestinationType': RedirectPhoneNumberDestination.RedirectDestinationTypeEnum

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'redirectDestinationType',
      baseName: 'redirectDestinationType',
      type: 'RedirectPhoneNumberDestination.RedirectDestinationTypeEnum',
    },
  ]

  static getAttributeTypeMap() {
    return RedirectPhoneNumberDestination.attributeTypeMap
  }
}

export namespace RedirectPhoneNumberDestination {
  export enum RedirectDestinationTypeEnum {
    MAILBOX = <any>'MAILBOX',
    PHONENUMBER = <any>'PHONENUMBER',
  }
}
/**
 * Abstract base for always, busy and timeout trigger
 */
export class RedirectTrigger {
  /**
   * The type of the RedirectTrigger determining the concrete RedirectTrigger implementation
   */
  'redirectTriggerType': RedirectTrigger.RedirectTriggerTypeEnum

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'redirectTriggerType',
      baseName: 'redirectTriggerType',
      type: 'RedirectTrigger.RedirectTriggerTypeEnum',
    },
  ]

  static getAttributeTypeMap() {
    return RedirectTrigger.attributeTypeMap
  }
}

export namespace RedirectTrigger {
  export enum RedirectTriggerTypeEnum {
    ALWAYS = <any>'ALWAYS',
    BUSY = <any>'BUSY',
    TIMEOUT = <any>'TIMEOUT',
  }
}
/**
 * A representation of a Redirection
 */
export class Redirection {
  /**
   * Whether this Redirection is enabled or disabled
   */
  'enabled': boolean
  /**
   * True if the phoneNumber of this Redirection is assigned to a group, false otherwise
   */
  'groupNumber'?: boolean
  /**
   * The Id of the Redirection
   */
  'id': string
  'lastMailboxDestination'?: RedirectMailboxDestination
  'lastPhoneNumberDestination'?: RedirectPhoneNumberDestination
  /**
   * The phoneNumber that will be handled by this Redirection
   */
  'phoneNumber'?: string
  'redirectDestination': RedirectDestination
  'redirectTrigger': RedirectTrigger

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'enabled',
      baseName: 'enabled',
      type: 'boolean',
    },
    {
      name: 'groupNumber',
      baseName: 'groupNumber',
      type: 'boolean',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'lastMailboxDestination',
      baseName: 'lastMailboxDestination',
      type: 'RedirectMailboxDestination',
    },
    {
      name: 'lastPhoneNumberDestination',
      baseName: 'lastPhoneNumberDestination',
      type: 'RedirectPhoneNumberDestination',
    },
    {
      name: 'phoneNumber',
      baseName: 'phoneNumber',
      type: 'string',
    },
    {
      name: 'redirectDestination',
      baseName: 'redirectDestination',
      type: 'RedirectDestination',
    },
    {
      name: 'redirectTrigger',
      baseName: 'redirectTrigger',
      type: 'RedirectTrigger',
    },
  ]

  static getAttributeTypeMap() {
    return Redirection.attributeTypeMap
  }
}

export class RequestMetadata {
  /**
   * Page number
   */
  'page': number
  /**
   * Number of items per page
   */
  'pagesize': number
  /**
   * Name of the property used for sorting
   */
  'sort'?: string
  /**
   * Sort direction
   */
  'sortdirection': RequestMetadata.SortdirectionEnum
  /**
   * Number of pages
   */
  'totalPages': number

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'page',
      baseName: 'page',
      type: 'number',
    },
    {
      name: 'pagesize',
      baseName: 'pagesize',
      type: 'number',
    },
    {
      name: 'sort',
      baseName: 'sort',
      type: 'string',
    },
    {
      name: 'sortdirection',
      baseName: 'sortdirection',
      type: 'RequestMetadata.SortdirectionEnum',
    },
    {
      name: 'totalPages',
      baseName: 'totalPages',
      type: 'number',
    },
  ]

  static getAttributeTypeMap() {
    return RequestMetadata.attributeTypeMap
  }
}

export namespace RequestMetadata {
  export enum SortdirectionEnum {
    ASC = <any>'ASC',
    DESC = <any>'DESC',
  }
}
export class Tag {
  'alias'?: string
  'id'?: string
  'name': string
  'owner'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'alias',
      baseName: 'alias',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'owner',
      baseName: 'owner',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return Tag.attributeTypeMap
  }
}

/**
 * A TimeFrame defines a TimeRange in 24 hour format between 00:00 and 24:00 for each day of week
 */
export class TimeFrame {
  /**
   * Enabled on fridays
   */
  'friday': boolean
  /**
   * Enabled on mondays
   */
  'monday': boolean
  /**
   * Enabled on saturdays
   */
  'saturday': boolean
  /**
   * Enabled on sundays
   */
  'sunday': boolean
  /**
   * Eanabled on thursdays
   */
  'thursday': boolean
  /**
   * The time defining the beginning of the TimeRange (inclusive)
   */
  'timeBegin': string
  /**
   * The time defining the end of the TimeRange (inclusive)
   */
  'timeEnd': string
  /**
   * Enabled on tuesdays
   */
  'tuesday': boolean
  /**
   * Enabled on wednesdays
   */
  'wednesday': boolean

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'friday',
      baseName: 'friday',
      type: 'boolean',
    },
    {
      name: 'monday',
      baseName: 'monday',
      type: 'boolean',
    },
    {
      name: 'saturday',
      baseName: 'saturday',
      type: 'boolean',
    },
    {
      name: 'sunday',
      baseName: 'sunday',
      type: 'boolean',
    },
    {
      name: 'thursday',
      baseName: 'thursday',
      type: 'boolean',
    },
    {
      name: 'timeBegin',
      baseName: 'timeBegin',
      type: 'string',
    },
    {
      name: 'timeEnd',
      baseName: 'timeEnd',
      type: 'string',
    },
    {
      name: 'tuesday',
      baseName: 'tuesday',
      type: 'boolean',
    },
    {
      name: 'wednesday',
      baseName: 'wednesday',
      type: 'boolean',
    },
  ]

  static getAttributeTypeMap() {
    return TimeFrame.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE user
 */
export class User {
  /**
   * the email address of the user
   */
  'email': string
  /**
   * the family name of the user
   */
  'familyName': string
  /**
   * the callerId for faxes send by this user
   */
  'faxCallerId'?: string
  /**
   * whether to send a cover page for faxes send by this user
   */
  'faxCoverPage'?: boolean
  /**
   * whether the user recieves a email journal of send faxes
   */
  'faxEmailJournal'?: boolean
  /**
   * the header for faxes send by this user
   */
  'faxHeader'?: string
  /**
   * the name of the user
   */
  'firstName': string
  /**
   * the Id of the user
   */
  'id'?: number
  /**
   * the language of a user (default, de, en, ...)
   */
  'language': string
  /**
   * the login number for this user. The login number will be used as Jabber Id
   */
  'login': string
  /**
   * whether the user recieves a report on missed calls
   */
  'missedCallReport'?: boolean
  /**
   * the namespace defining the location of an user account
   */
  'namespace'?: string
  /**
   * defines a new password when a user is created or updated. This field will be empty when a user is fetched.
   */
  'password'?: string
  /**
   * the Id of the corresponding person contact object
   */
  'personId'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'email',
      baseName: 'email',
      type: 'string',
    },
    {
      name: 'familyName',
      baseName: 'familyName',
      type: 'string',
    },
    {
      name: 'faxCallerId',
      baseName: 'faxCallerId',
      type: 'string',
    },
    {
      name: 'faxCoverPage',
      baseName: 'faxCoverPage',
      type: 'boolean',
    },
    {
      name: 'faxEmailJournal',
      baseName: 'faxEmailJournal',
      type: 'boolean',
    },
    {
      name: 'faxHeader',
      baseName: 'faxHeader',
      type: 'string',
    },
    {
      name: 'firstName',
      baseName: 'firstName',
      type: 'string',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'language',
      baseName: 'language',
      type: 'string',
    },
    {
      name: 'login',
      baseName: 'login',
      type: 'string',
    },
    {
      name: 'missedCallReport',
      baseName: 'missedCallReport',
      type: 'boolean',
    },
    {
      name: 'namespace',
      baseName: 'namespace',
      type: 'string',
    },
    {
      name: 'password',
      baseName: 'password',
      type: 'string',
    },
    {
      name: 'personId',
      baseName: 'personId',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return User.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE voicemailbox group
 */
export class VoicemailGroup {
  /**
   * the account id of the voicemailbox group
   */
  'accountId'?: number
  /**
   * the name of the voicemailbox group
   */
  'name'?: string
  /**
   * the send mail option of the voicemailbox group
   */
  'sendMail'?: boolean

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'accountId',
      baseName: 'accountId',
      type: 'number',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'sendMail',
      baseName: 'sendMail',
      type: 'boolean',
    },
  ]

  static getAttributeTypeMap() {
    return VoicemailGroup.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE voicemailbox user
 */
export class VoicemailUser {
  /**
   * the account id of the voicemailbox user
   */
  'accountId'?: number
  /**
   * the name of the voicemailbox user
   */
  'name'?: string
  /**
   * the send mail option of the voicemailbox user
   */
  'sendMail'?: boolean
  /**
   * the voicemailbox name of the voicemailbox user
   */
  'voicemailboxName'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'accountId',
      baseName: 'accountId',
      type: 'number',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'sendMail',
      baseName: 'sendMail',
      type: 'boolean',
    },
    {
      name: 'voicemailboxName',
      baseName: 'voicemailboxName',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return VoicemailUser.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE voicemailbox
 */
export class Voicemailbox {
  /**
   * the id of the voicemailbox
   */
  'id'?: number
  /**
   * the maximumDuration of the voicemailbox in seconds
   */
  'maximumDuration'?: number
  /**
   * the name of the voicemailbox
   */
  'name'?: string
  /**
   * the record option of the voicemailbox
   */
  'noRecord'?: boolean
  /**
   * the number of the voicemailbox
   */
  'number'?: string
  /**
   * the password of the voicemailbox
   */
  'password'?: string
  /**
   * the voicemailGroups of the voicemailbox
   */
  'voicemailGroups'?: Array<VoicemailGroup>
  /**
   * the voicemailUsers of the voicemailbox
   */
  'voicemailUsers'?: Array<VoicemailUser>

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'maximumDuration',
      baseName: 'maximumDuration',
      type: 'number',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'noRecord',
      baseName: 'noRecord',
      type: 'boolean',
    },
    {
      name: 'number',
      baseName: 'number',
      type: 'string',
    },
    {
      name: 'password',
      baseName: 'password',
      type: 'string',
    },
    {
      name: 'voicemailGroups',
      baseName: 'voicemailGroups',
      type: 'Array<VoicemailGroup>',
    },
    {
      name: 'voicemailUsers',
      baseName: 'voicemailUsers',
      type: 'Array<VoicemailUser>',
    },
  ]

  static getAttributeTypeMap() {
    return Voicemailbox.attributeTypeMap
  }
}

/**
 * A representation of a STARFACE voicemailbox list item
 */
export class VoicemailboxListItem {
  /**
   * the assigned groups of the voicemailbox
   */
  'assignedgroups'?: Array<string>
  /**
   * the assigned users of the voicemailbox
   */
  'assignedusers'?: Array<string>
  /**
   * the id of the voicemailbox
   */
  'id'?: number
  /**
   * the number of the voicemailbox
   */
  'mailboxnumber'?: string
  /**
   * the name of the voicemailbox
   */
  'voiceboxname'?: string

  static discriminator: string | undefined = undefined

  static attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
  }> = [
    {
      name: 'assignedgroups',
      baseName: 'assignedgroups',
      type: 'Array<string>',
    },
    {
      name: 'assignedusers',
      baseName: 'assignedusers',
      type: 'Array<string>',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'number',
    },
    {
      name: 'mailboxnumber',
      baseName: 'mailboxnumber',
      type: 'string',
    },
    {
      name: 'voiceboxname',
      baseName: 'voiceboxname',
      type: 'string',
    },
  ]

  static getAttributeTypeMap() {
    return VoicemailboxListItem.attributeTypeMap
  }
}

let enumsMap: { [index: string]: any } = {
  'Account.TypeEnum': Account.TypeEnum,
  'Attribute.DisplayKeyEnum': Attribute.DisplayKeyEnum,
  'ConferenceConfiguration.GetLanguageEnum':
    ConferenceConfiguration.GetLanguageEnum,
  'EditFunctionKeyCallList.CallListRequestEnum':
    EditFunctionKeyCallList.CallListRequestEnum,
  'EditFunctionKeyForwardCall.ForwardTypeEnum':
    EditFunctionKeyForwardCall.ForwardTypeEnum,
  'EditFunctionKeyPhoneContact.AddressbookRequestEnum':
    EditFunctionKeyPhoneContact.AddressbookRequestEnum,
  'FunctionKey.AddressbookRequestEnum': FunctionKey.AddressbookRequestEnum,
  'FunctionKey.CallListRequestEnum': FunctionKey.CallListRequestEnum,
  'FunctionKey.ForwardTypeEnum': FunctionKey.ForwardTypeEnum,
  'FunctionKey.FunctionKeyTypeEnum': FunctionKey.FunctionKeyTypeEnum,
  'FunctionKeySetError.FunctionKeyErrorTypeEnum':
    FunctionKeySetError.FunctionKeyErrorTypeEnum,
  'Login.LoginTypeEnum': Login.LoginTypeEnum,
  'ManagedConference.OccurrenceEnum': ManagedConference.OccurrenceEnum,
  'PhoneNumber.TypeEnum': PhoneNumber.TypeEnum,
  'RedirectDestination.RedirectDestinationTypeEnum':
    RedirectDestination.RedirectDestinationTypeEnum,
  'RedirectMailboxDestination.RedirectDestinationTypeEnum':
    RedirectMailboxDestination.RedirectDestinationTypeEnum,
  'RedirectPhoneNumberDestination.RedirectDestinationTypeEnum':
    RedirectPhoneNumberDestination.RedirectDestinationTypeEnum,
  'RedirectTrigger.RedirectTriggerTypeEnum':
    RedirectTrigger.RedirectTriggerTypeEnum,
  'RequestMetadata.SortdirectionEnum': RequestMetadata.SortdirectionEnum,
}

let typeMap: { [index: string]: any } = {
  Account: Account,
  AssignableNumber: AssignableNumber,
  AssignableUser: AssignableUser,
  Attribute: Attribute,
  AuthToken: AuthToken,
  Block: Block,
  CallService: CallService,
  ConferenceConfiguration: ConferenceConfiguration,
  ConferenceConfigurationMailBodyVariable:
    ConferenceConfigurationMailBodyVariable,
  ConferenceConfigurationTexts: ConferenceConfigurationTexts,
  Contact: Contact,
  ContactList: ContactList,
  ContactSummary: ContactSummary,
  ContactsScheme: ContactsScheme,
  EditFunctionKey: EditFunctionKey,
  EditFunctionKeyBusyLampField: EditFunctionKeyBusyLampField,
  EditFunctionKeyCallList: EditFunctionKeyCallList,
  EditFunctionKeyCcbs: EditFunctionKeyCcbs,
  EditFunctionKeyDnd: EditFunctionKeyDnd,
  EditFunctionKeyDtmf: EditFunctionKeyDtmf,
  EditFunctionKeyForwardCall: EditFunctionKeyForwardCall,
  EditFunctionKeyForwardNumberUnconditional:
    EditFunctionKeyForwardNumberUnconditional,
  EditFunctionKeyForwardNumberUnconditionalNumberSetting:
    EditFunctionKeyForwardNumberUnconditionalNumberSetting,
  EditFunctionKeyGenericUrl: EditFunctionKeyGenericUrl,
  EditFunctionKeyGroupLogin: EditFunctionKeyGroupLogin,
  EditFunctionKeyGroupLoginGroupSettings:
    EditFunctionKeyGroupLoginGroupSettings,
  EditFunctionKeyModuleActivation: EditFunctionKeyModuleActivation,
  EditFunctionKeyModuleActivationModuleSettings:
    EditFunctionKeyModuleActivationModuleSettings,
  EditFunctionKeyParkAndOrbit: EditFunctionKeyParkAndOrbit,
  EditFunctionKeyPhoneContact: EditFunctionKeyPhoneContact,
  EditFunctionKeyQuickDial: EditFunctionKeyQuickDial,
  EditFunctionKeySeperator: EditFunctionKeySeperator,
  EditFunctionKeySignalNumber: EditFunctionKeySignalNumber,
  FmcPhone: FmcPhone,
  FunctionKey: FunctionKey,
  FunctionKeySet: FunctionKeySet,
  FunctionKeySetError: FunctionKeySetError,
  Group: Group,
  GroupListItem: GroupListItem,
  Login: Login,
  ManagedConference: ManagedConference,
  ManagedConferenceParticipant: ManagedConferenceParticipant,
  ManagedConferenceSummary: ManagedConferenceSummary,
  NumberForPhoneAssignment: NumberForPhoneAssignment,
  PermissionInfo: PermissionInfo,
  PhoneAssignment: PhoneAssignment,
  PhoneConfig: PhoneConfig,
  PhoneNumber: PhoneNumber,
  PhoneNumberAssignment: PhoneNumberAssignment,
  PhoneNumberConfig: PhoneNumberConfig,
  RedirectDestination: RedirectDestination,
  RedirectMailboxDestination: RedirectMailboxDestination,
  RedirectPhoneNumberDestination: RedirectPhoneNumberDestination,
  RedirectTrigger: RedirectTrigger,
  Redirection: Redirection,
  RequestMetadata: RequestMetadata,
  Tag: Tag,
  TimeFrame: TimeFrame,
  User: User,
  VoicemailGroup: VoicemailGroup,
  VoicemailUser: VoicemailUser,
  Voicemailbox: Voicemailbox,
  VoicemailboxListItem: VoicemailboxListItem,
}
